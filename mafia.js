/* –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç–∏–∫! 
–≠—Ç–æ –º–æ–π —Å—ã—Ä–æ–π –ø—Ä–æ–µ–∫—Ç —á–∏—Å—Ç–æ –¥–ª—è –≥–∏—Ç—Ö–∞–±–∞.
–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã –¥–æ–≤–µ–¥–µ—Ç–µ –µ–≥–æ –¥–æ –∏–¥–µ–∞–ª–∞ –∏ –≤–∞–º
–ó–∞–π–¥–µ—Ç. –í –ø—Ä–∏–Ω—Ü–∏–ø–µ —Ä–∞–±–æ—Ç—ã –Ω–µ –ø—Ä—è–º –º–Ω–æ–≥–æ.

–°–≤—è–∑—å —Å–æ –º–Ω–æ–π: 
VK: https://vk.com/neckiy

–° –ª—é–±–æ–≤—å—é, –ú–∞–∫—Å–∏–º –î–∞–≤—ã–¥–æ–≤ <3
*/ 
const { VK, Keyboard } = require('vk-io');

const vk = new VK({
    token: '—Ç–≤–æ–π —Ç–æ–∫–µ–Ω'
});

const ADMIN_ID = —Å–º–µ–Ω–∏ –Ω–∞ –∞–π–¥–∏ –≤–∫;

class MafiaGame {
    constructor() {
        this.players = new Map();
        this.roles = new Map();
        this.gameState = 'waiting';
        this.dayCount = 0;
        this.votes = new Map();
        this.mafiaVotes = new Map();
        this.doctorChoice = null;
        this.sheriffChoice = null;
        this.killedTonight = null;
        this.healedTonight = null;
        this.chatId = null;
        this.phase = 'day';
        this.nightTimer = null;
        this.votingTimer = null;
        this.dayDuration = 120; // 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –¥–Ω—è
        this.nightDuration = 60; // 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è –Ω–æ—á–∏
    }

    addPlayer(userId, firstName, lastName) {
        if (this.players.has(userId)) return false;
        this.players.set(userId, { id: userId, firstName, lastName, alive: true });
        console.log(`üéÆ –ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω: ${firstName} ${lastName} (${userId})`);
        return true;
    }

    removePlayer(userId) {
        if (this.players.delete(userId)) {
            this.roles.delete(userId);
            console.log(`‚ùå –ò–≥—Ä–æ–∫ —É–¥–∞–ª–µ–Ω: ${userId}`);
            return true;
        }
        return false;
    }

    startGame(chatId, isAdminForce = false) {
        const minPlayers = isAdminForce ? 2 : 6;
        if (this.players.size < minPlayers) {
            console.log(`üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: ${this.players.size}/${minPlayers}`);
            return false;
        }

        this.chatId = chatId;
        this.gameState = 'playing';
        this.dayCount = 1;
        this.phase = 'day';
        this.assignRoles(isAdminForce);
        
        console.log(`üé≤ –ò–ì–†–ê –ù–ê–ß–ê–¢–ê | –ß–∞—Ç: ${chatId} | –ò–≥—Ä–æ–∫–æ–≤: ${this.players.size} | –†–µ–∂–∏–º: ${isAdminForce ? 'ADMIN_FORCE' : 'STANDARD'}`);
        console.log(`üé≠ –†–æ–ª–∏:`, Array.from(this.roles.entries()));
        
        return true;
    }

    assignRoles(isAdminForce = false) {
        const playerIds = Array.from(this.players.keys());
        const shuffled = [...playerIds].sort(() => Math.random() - 0.5);
        this.roles.clear();

        if (isAdminForce) {
            this.assignRolesForSmallGame(shuffled);
        } else {
            this.assignRolesStandard(shuffled);
        }
    }

    assignRolesForSmallGame(shuffled) {
        const size = this.players.size;
        if (size === 2) {
            this.roles.set(shuffled[0], 'mafia');
            this.roles.set(shuffled[1], 'citizen');
        } else if (size === 3) {
            this.roles.set(shuffled[0], 'mafia');
            this.roles.set(shuffled[1], 'doctor');
            this.roles.set(shuffled[2], 'citizen');
        } else if (size === 4) {
            this.roles.set(shuffled[0], 'mafia');
            this.roles.set(shuffled[1], 'doctor');
            this.roles.set(shuffled[2], 'sheriff');
            this.roles.set(shuffled[3], 'citizen');
        } else if (size === 5) {
            this.roles.set(shuffled[0], 'mafia');
            this.roles.set(shuffled[1], 'mafia');
            this.roles.set(shuffled[2], 'doctor');
            this.roles.set(shuffled[3], 'sheriff');
            this.roles.set(shuffled[4], 'citizen');
        }
    }

    assignRolesStandard(shuffled) {
        const mafiaCount = Math.floor(this.players.size / 3);
        for (let i = 0; i < mafiaCount; i++) {
            this.roles.set(shuffled[i], 'mafia');
        }
        this.roles.set(shuffled[mafiaCount], 'doctor');
        this.roles.set(shuffled[mafiaCount + 1], 'sheriff');
        for (let i = mafiaCount + 2; i < shuffled.length; i++) {
            this.roles.set(shuffled[i], 'citizen');
        }
    }

    getRoleEmoji(role) {
        const emojis = { 'mafia': 'üî´', 'doctor': 'üíä', 'sheriff': 'üëÆ', 'citizen': 'üë®‚Äçüåæ' };
        return emojis[role] || '‚ùì';
    }

    getRoleDescription(role) {
        const descriptions = {
            'mafia': 'üî´ –ú–∞—Ñ–∏—è - –Ω–æ—á—å—é –≤—ã —É–±–∏–≤–∞–µ—Ç–µ –≥–æ—Ä–æ–∂–∞–Ω',
            'doctor': 'üíä –î–æ–∫—Ç–æ—Ä - –Ω–æ—á—å—é –≤—ã –ª–µ—á–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞',
            'sheriff': 'üëÆ –®–µ—Ä–∏—Ñ - –Ω–æ—á—å—é –≤—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –º–∞—Ñ–∏—é',
            'citizen': 'üë®‚Äçüåæ –ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å - –≤—ã—á–∏—Å–ª–∏—Ç–µ –∏ –ø–æ–≤–µ—Å—å—Ç–µ –º–∞—Ñ–∏—é'
        };
        return descriptions[role] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å';
    }

    voteForLynch(voterId, targetId) {
        if (this.phase !== 'day') {
            console.log(`üåô –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–º —Ç–æ–ª—å–∫–æ`);
            return false;
        }
        if (!this.players.get(voterId)?.alive || !this.players.get(targetId)?.alive) {
            console.log(`üíÄ –ò–≥—Ä–æ–∫ –º–µ—Ä—Ç–≤`);
            return false;
        }
        this.votes.set(voterId, targetId);
        console.log(`üó≥Ô∏è ${voterId} ‚Üí ${targetId}`);
        return true;
    }

    mafiaVote(mafiaId, targetId) {
        if (this.phase !== 'night' || this.roles.get(mafiaId) !== 'mafia') {
            console.log(`üö´ –ù–µ –º–∞—Ñ–∏—è –∏–ª–∏ –Ω–µ –Ω–æ—á—å`);
            return false;
        }
        if (!this.players.get(targetId)?.alive) return false;
        this.mafiaVotes.set(mafiaId, targetId);
        console.log(`üî´ –ú–∞—Ñ–∏—è ${mafiaId} ‚Üí ${targetId}`);
        return true;
    }

    doctorHeal(doctorId, targetId) {
        if (this.phase !== 'night' || this.roles.get(doctorId) !== 'doctor') return false;
        this.doctorChoice = targetId;
        this.healedTonight = targetId;
        console.log(`üíä –î–æ–∫—Ç–æ—Ä ${doctorId} ‚Üí ${targetId}`);
        return true;
    }

    sheriffCheck(sheriffId, targetId) {
        if (this.phase !== 'night' || this.roles.get(sheriffId) !== 'sheriff') return false;
        this.sheriffChoice = targetId;
        const isMafia = this.roles.get(targetId) === 'mafia';
        console.log(`üëÆ –®–µ—Ä–∏—Ñ ${sheriffId} ‚Üí ${targetId} = ${isMafia ? 'MAFIA' : 'CLEAN'}`);
        return isMafia;
    }

    calculateVotes() {
        const voteCount = new Map();
        for (const targetId of this.votes.values()) {
            voteCount.set(targetId, (voteCount.get(targetId) || 0) + 1);
        }
        
        let maxVotes = 0;
        let lynchedPlayer = null;
        for (const [playerId, votes] of voteCount) {
            if (votes > maxVotes) {
                maxVotes = votes;
                lynchedPlayer = playerId;
            }
        }
        
        const aliveCount = this.getAlivePlayers().length;
        if (maxVotes > aliveCount / 2) {
            console.log(`üíÄ –ü–æ–≤–µ—à–µ–Ω: ${lynchedPlayer} (${maxVotes} –≥–æ–ª–æ—Å–æ–≤)`);
            return lynchedPlayer;
        }
        console.log(`‚úÖ –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–≤–µ—à–µ–Ω (–º–∞–∫—Å: ${maxVotes})`);
        return null;
    }

    calculateMafiaVotes() {
        const voteCount = new Map();
        for (const targetId of this.mafiaVotes.values()) {
            voteCount.set(targetId, (voteCount.get(targetId) || 0) + 1);
        }
        
        let maxVotes = 0;
        let killedPlayer = null;
        for (const [playerId, votes] of voteCount) {
            if (votes > maxVotes) {
                maxVotes = votes;
                killedPlayer = playerId;
            }
        }
        
        if (killedPlayer && killedPlayer !== this.healedTonight) {
            console.log(`üî™ –ú–∞—Ñ–∏—è —É–±–∏–ª–∞: ${killedPlayer}`);
            return killedPlayer;
        }
        console.log(`üõ°Ô∏è –£–±–∏–π—Å—Ç–≤–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ`);
        return null;
    }

    async switchToNight() {
        this.phase = 'night';
        this.clearVotes();
        console.log(`üåô –ù–û–ß–¨ ${this.dayCount}`);
        
        await this.sendToChat(
            `üåô –ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å ${this.dayCount}!\n\n` +
            `üî´ –ú–∞—Ñ–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç –∂–µ—Ä—Ç–≤—É\n` +
            `üíä –î–æ–∫—Ç–æ—Ä –ª–µ—á–∏—Ç\n` +
            `üëÆ –®–µ—Ä–∏—Ñ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç\n\n` +
            `–£ –≤–∞—Å ${this.nightDuration} —Å–µ–∫—É–Ω–¥!`
        );

        this.sendNightActions();
        this.startNightTimer();
    }

    async switchToDay() {
        const killed = this.calculateMafiaVotes();
        if (killed) {
            this.killPlayer(killed);
            const killedPlayer = this.players.get(killed);
            await this.sendToChat(`üíÄ –ù–æ—á—å—é –±—ã–ª —É–±–∏—Ç: ${killedPlayer.firstName} ${killedPlayer.lastName}`);
        } else {
            await this.sendToChat(`‚úÖ –≠—Ç–æ–π –Ω–æ—á—å—é –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–≥–∏–±!`);
        }

        const winner = this.checkWinCondition();
        if (winner) {
            await this.endGame(winner);
            return;
        }

        this.phase = 'day';
        this.dayCount++;
        this.clearVotes();
        
        console.log(`‚òÄÔ∏è –î–ï–ù–¨ ${this.dayCount}`);
        await this.sendToChat(
            `‚òÄÔ∏è –ù–∞—Å—Ç—É–ø–∞–µ—Ç –¥–µ–Ω—å ${this.dayCount}!\n\n` +
            `–û–±—Å—É–∂–¥–∞–π—Ç–µ –∏ –≥–æ–ª–æ—Å—É–π—Ç–µ!\n` +
            `–î–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ "–≥–æ–ª–æ—Å" –≤ –õ–° –±–æ—Ç—É\n\n` +
            `–£ –≤–∞—Å ${this.dayDuration} —Å–µ–∫—É–Ω–¥!`
        );

        this.startDayTimer();
    }

    killPlayer(playerId) {
        const player = this.players.get(playerId);
        if (player) {
            player.alive = false;
            console.log(`üíÄ –£–±–∏—Ç: ${playerId}`);
            return true;
        }
        return false;
    }

    checkWinCondition() {
        const alivePlayers = this.getAlivePlayers();
        const aliveMafia = alivePlayers.filter(p => this.roles.get(p.id) === 'mafia').length;
        const aliveCitizens = alivePlayers.length - aliveMafia;

        console.log(`üìä –ú–∞—Ñ–∏—è: ${aliveMafia} vs –ì–æ—Ä–æ–∂–∞–Ω–µ: ${aliveCitizens}`);

        if (aliveMafia === 0) return 'citizens';
        if (aliveMafia >= aliveCitizens) return 'mafia';
        return null;
    }

    async endGame(winner) {
        this.gameState = 'finished';
        this.clearTimers();
        
        const winnerText = winner === 'citizens' ? 
            'üéâ –ü–û–ë–ï–î–ê –ú–ò–†–ù–´–• –ñ–ò–¢–ï–õ–ï–ô! üéâ\n\n–ú–∞—Ñ–∏—è –ø–æ–±–µ–∂–¥–µ–Ω–∞!' : 
            'üé≠ –ü–û–ë–ï–î–ê –ú–ê–§–ò–ò! üé≠\n\n–ì–æ—Ä–æ–¥ –ø–∞–ª –ø–µ—Ä–µ–¥ –º–∞—Ñ–∏–µ–π!';
        
        await this.sendToChat(winnerText);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏
        let rolesInfo = '\nüé≠ –†–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤:\n';
        for (const [playerId, role] of this.roles) {
            const player = this.players.get(playerId);
            rolesInfo += `${player.firstName} ${player.lastName} - ${this.getRoleEmoji(role)} ${role}\n`;
        }
        
        await this.sendToChat(rolesInfo);
        console.log(`üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner}`);
    }

    getAlivePlayers() {
        return Array.from(this.players.values()).filter(p => p.alive);
    }

    getAlivePlayersForVoting(excludeId = null) {
        return this.getAlivePlayers().filter(p => p.id !== excludeId);
    }

    createVotingKeyboard(excludeId = null) {
        const players = this.getAlivePlayersForVoting(excludeId);
        if (players.length === 0) return null;

        const keyboard = Keyboard.keyboard([]);
        players.forEach((player, index) => {
            if (index % 2 === 0) keyboard.row();
            keyboard.textButton({
                label: player.firstName,
                payload: { command: 'vote', target: player.id },
                color: Keyboard.SECONDARY_COLOR
            });
        });

        keyboard.row().textButton({
            label: '‚ùå –û—Ç–º–µ–Ω–∞',
            payload: { command: 'cancel_vote' },
            color: Keyboard.NEGATIVE_COLOR
        });

        return keyboard;
    }

    createRoleKeyboard(role, excludeId = null) {
        const players = this.getAlivePlayersForVoting(excludeId);
        if (players.length === 0) return null;

        const keyboard = Keyboard.keyboard([]);
        players.forEach((player, index) => {
            if (index % 2 === 0) keyboard.row();
            keyboard.textButton({
                label: player.firstName,
                payload: { command: `${role}_action`, target: player.id },
                color: Keyboard.PRIMARY_COLOR
            });
        });

        keyboard.row().textButton({
            label: '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
            payload: { command: `skip_${role}` },
            color: Keyboard.NEGATIVE_COLOR
        });

        return keyboard;
    }

    sendNightActions() {
        for (const [playerId, role] of this.roles) {
            if (!this.players.get(playerId).alive) continue;
            
            let message = '';
            let keyboard = null;

            switch (role) {
                case 'mafia':
                    message = 'üî´ –ú–∞—Ñ–∏—è, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞:';
                    keyboard = this.createRoleKeyboard('mafia', playerId);
                    break;
                case 'doctor':
                    message = 'üíä –î–æ–∫—Ç–æ—Ä, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –ª–µ—á–∏—Ç—å:';
                    keyboard = this.createRoleKeyboard('doctor', playerId);
                    break;
                case 'sheriff':
                    message = 'üëÆ –®–µ—Ä–∏—Ñ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:';
                    keyboard = this.createRoleKeyboard('sheriff', playerId);
                    break;
            }

            if (message) {
                this.sendPrivateMessage(playerId, message, keyboard);
            }
        }
    }

    startNightTimer() {
        this.clearTimers();
        this.nightTimer = setTimeout(async () => {
            console.log(`‚è∞ –¢–∞–π–º–µ—Ä –Ω–æ—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω`);
            await this.switchToDay();
        }, this.nightDuration * 1000);
    }

    startDayTimer() {
        this.clearTimers();
        this.votingTimer = setTimeout(async () => {
            console.log(`‚è∞ –¢–∞–π–º–µ—Ä –¥–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω`);
            await this.processDayResults();
        }, this.dayDuration * 1000);
    }

    async processDayResults() {
        const lynched = this.calculateVotes();
        if (lynched) {
            this.killPlayer(lynched);
            const lynchedPlayer = this.players.get(lynched);
            const role = this.roles.get(lynched);
            await this.sendToChat(
                `üíÄ –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ–≤–µ—à–µ–Ω:\n` +
                `${lynchedPlayer.firstName} ${lynchedPlayer.lastName}\n` +
                `üé≠ –ï–≥–æ —Ä–æ–ª—å: ${this.getRoleEmoji(role)} ${role}`
            );
        } else {
            await this.sendToChat(`‚úÖ –ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª –ø–æ–≤–µ—à–µ–Ω!`);
        }

        const winner = this.checkWinCondition();
        if (winner) {
            await this.endGame(winner);
        } else {
            await this.switchToNight();
        }
    }

    clearVotes() {
        this.votes.clear();
        this.mafiaVotes.clear();
        this.doctorChoice = null;
        this.sheriffChoice = null;
        this.killedTonight = null;
        this.healedTonight = null;
    }

    clearTimers() {
        if (this.nightTimer) clearTimeout(this.nightTimer);
        if (this.votingTimer) clearTimeout(this.votingTimer);
    }

    async sendToChat(message) {
        if (!this.chatId) return;
        try {
            await vk.api.messages.send({
                peer_id: this.chatId,
                message: message,
                random_id: Math.floor(Math.random() * 1e9)
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç:', error);
        }
    }

    async sendPrivateMessage(userId, message, keyboard = null) {
        const params = {
            peer_id: userId,
            message: message,
            random_id: Math.floor(Math.random() * 1e9)
        };
        if (keyboard) params.keyboard = keyboard;
        
        try {
            await vk.api.messages.send(params);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –õ–°:', error);
        }
    }
}

const game = new MafiaGame();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
vk.updates.on('message_new', async (context) => {
    const { text, peerId, senderId, payload, isChat } = context;
    
    try {
        const user = (await vk.api.users.get({ user_ids: [senderId] }))[0];
        
        console.log(`üì® "${text}" –æ—Ç ${user.first_name} ${user.last_name} (${senderId}) –≤ ${isChat ? '—á–∞—Ç–µ' : '–õ–°'}`);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        const hasPayload = payload && Object.keys(payload).length > 0;
        const isButtonClick = hasPayload && payload.command;

        if (isButtonClick) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
            await handlePayload(context, payload, user);
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
            if (isChat) {
                await handleChatCommand(context, text, senderId, peerId, user);
            } else {
                await handlePrivateCommand(context, text, senderId, user);
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
});

async function handlePayload(context, payload, user) {
    const { command, target } = payload;
    const senderId = context.senderId;

    console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏: ${command}`, { target });

    switch (command) {
        case 'vote':
            if (game.voteForLynch(senderId, target)) {
                await context.send(`‚úÖ –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –ø—Ä–æ—Ç–∏–≤ ${game.players.get(target).firstName}`);
            } else {
                await context.send(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å`);
            }
            break;

        case 'cancel_vote':
            game.votes.delete(senderId);
            await context.send(`üóëÔ∏è –ì–æ–ª–æ—Å –æ—Ç–º–µ–Ω–µ–Ω`);
            break;

        case 'mafia_action':
            if (game.mafiaVote(senderId, target)) {
                await context.send(`‚úÖ –ú–∞—Ñ–∏—è –≤—ã–±—Ä–∞–ª–∞ —Ü–µ–ª—å: ${game.players.get(target).firstName}`);
            } else {
                await context.send(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å`);
            }
            break;

        case 'doctor_action':
            if (game.doctorHeal(senderId, target)) {
                await context.send(`‚úÖ –í—ã –ª–µ—á–∏—Ç–µ: ${game.players.get(target).firstName}`);
            } else {
                await context.send(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å –¥–ª—è –ª–µ—á–µ–Ω–∏—è`);
            }
            break;

        case 'sheriff_action':
            const isMafia = game.sheriffCheck(senderId, target);
            await context.send(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${game.players.get(target).firstName} - ${isMafia ? 'üî´ –ú–ê–§–ò–Ø!' : 'üë®‚Äçüåæ –ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å'}`);
            break;

        case 'skip_mafia':
        case 'skip_doctor':
        case 'skip_sheriff':
            await context.send(`‚è≠Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ`);
            break;
    }
}

async function handleChatCommand(context, text, senderId, peerId, user) {
    const command = text.toLowerCase().trim();

    console.log(`üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ: ${command}`);

    switch (command) {
        case '–Ω–∞—á–∞—Ç—å':
        case 'start':
            if (game.gameState === 'waiting') {
                game.addPlayer(senderId, user.first_name, user.last_name);
                await context.send(`üéÆ ${user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! üë• –ò–≥—Ä–æ–∫–æ–≤: ${game.players.size}/6\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–∞–ø–∏—à–∏—Ç–µ "—Å—Ç–∞—Ä—Ç"`);
            } else {
                await context.send(`‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!`);
            }
            break;

        case '—Å—Ç–∞—Ä—Ç':
            if (game.gameState === 'waiting') {
                if (game.startGame(peerId)) {
                    await context.send(`üé≤ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! üë• –ò–≥—Ä–æ–∫–æ–≤: ${game.players.size}`);
                    await sendRolesToPlayers();
                    await game.sendToChat(`‚òÄÔ∏è –î–µ–Ω—å 1 –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –û–±—Å—É–∂–¥–∞–π—Ç–µ –∏ –≥–æ–ª–æ—Å—É–π—Ç–µ!\n\n–î–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ "–≥–æ–ª–æ—Å" –≤ –õ–° –±–æ—Ç—É`);
                    game.startDayTimer();
                } else {
                    await context.send(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 6, —Å–µ–π—á–∞—Å: ${game.players.size}`);
                }
            } else {
                await context.send(`‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!`);
            }
            break;

        case '/pofig':
            if (senderId === ADMIN_ID) {
                console.log(`‚ö° –ê–¥–º–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª /pofig`);
                if (game.gameState === 'waiting') {
                    if (game.startGame(peerId, true)) {
                        await context.send(`üé≤ –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ /pofig! üë• –ò–≥—Ä–æ–∫–æ–≤: ${game.players.size}`);
                        await sendRolesToPlayers();
                        await game.sendToChat(`‚òÄÔ∏è –î–µ–Ω—å 1 –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –û–±—Å—É–∂–¥–∞–π—Ç–µ –∏ –≥–æ–ª–æ—Å—É–π—Ç–µ!`);
                        game.startDayTimer();
                    } else {
                        await context.send(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–∞–∂–µ –¥–ª—è /pofig!`);
                    }
                } else {
                    await context.send(`‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!`);
                }
            }
            break;

        case '—Å—Ç–∞—Ç—É—Å':
            const alivePlayers = game.getAlivePlayers();
            if (alivePlayers.length === 0) {
                await context.send(`üìä –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞`);
                break;
            }
            const statusText = alivePlayers.map(p => {
                const role = game.roles.get(p.id);
                const status = p.alive ? '‚úÖ' : 'üíÄ';
                return `${status} ${p.firstName} ${game.getRoleEmoji(role)}`;
            }).join('\n');
            await context.send(`üìä –°—Ç–∞—Ç—É—Å:\n–î–µ–Ω—å: ${game.dayCount}\n–§–∞–∑–∞: ${game.phase === 'day' ? '‚òÄÔ∏è –î–µ–Ω—å' : 'üåô –ù–æ—á—å'}\n\n–ò–≥—Ä–æ–∫–∏:\n${statusText}`);
            break;

        case '—Å—Ç–æ–ø':
            if (senderId === ADMIN_ID) {
                game.gameState = 'waiting';
                game.players.clear();
                game.roles.clear();
                game.clearTimers();
                await context.send(`üõë –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`);
                console.log(`üõë –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º ${ADMIN_ID}`);
            }
            break;

        case '–≥–æ–ª–æ—Å':
            if (game.gameState === 'playing') {
                const keyboard = game.createVotingKeyboard(senderId);
                if (keyboard) {
                    await game.sendPrivateMessage(senderId, `üó≥Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –ø—Ä–æ—Ç–∏–≤ –∫–æ—Ç–æ—Ä–æ–≥–æ –≥–æ–ª–æ—Å—É–µ—Ç–µ:`, keyboard);
                    await context.send(`üì© –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –õ–°!`);
                } else {
                    await context.send(`‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è`);
                }
            } else {
                await context.send(`‚ùå –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞`);
            }
            break;

        default:
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
            break;
    }
}

async function handlePrivateCommand(context, text, senderId, user) {
    const command = text.toLowerCase().trim();

    console.log(`üîí –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –õ–°: ${command}`);

    switch (command) {
        case '–≥–æ–ª–æ—Å':
            if (game.gameState === 'playing') {
                const keyboard = game.createVotingKeyboard(senderId);
                if (keyboard) {
                    await context.send(`üó≥Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –ø—Ä–æ—Ç–∏–≤ –∫–æ—Ç–æ—Ä–æ–≥–æ –≥–æ–ª–æ—Å—É–µ—Ç–µ:`, { keyboard });
                } else {
                    await context.send(`‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è`);
                }
            } else {
                await context.send(`‚ùå –ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞`);
            }
            break;

        case '—Ä–æ–ª—å':
            if (game.roles.has(senderId)) {
                const role = game.roles.get(senderId);
                await context.send(`üé≠ –í–∞—à–∞ —Ä–æ–ª—å: ${game.getRoleEmoji(role)} ${role}\n\n${game.getRoleDescription(role)}`);
            } else {
                await context.send(`‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏ –≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ`);
            }
            break;

        case '–ø–æ–º–æ—â—å':
        case 'help':
        case '–∫–æ–º–∞–Ω–¥—ã':
            await context.send(getHelpMessage());
            break;

        case 'start':
        case '–Ω–∞—á–∞—Ç—å':
            await context.send(`üéÆ –ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–∞—á–∞—Ç—å" –≤ —á–∞—Ç–µ, –≥–¥–µ –∏–¥–µ—Ç –∏–≥—Ä–∞!`);
            break;

        default:
            await context.send(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ "–ø–æ–º–æ—â—å" –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`);
            break;
    }
}

async function sendRolesToPlayers() {
    for (const [playerId, role] of game.roles) {
        const player = game.players.get(playerId);
        await game.sendPrivateMessage(
            playerId,
            `üé≠ –í–∞—à–∞ —Ä–æ–ª—å: ${game.getRoleEmoji(role)} ${role}\n\n${game.getRoleDescription(role)}\n\n–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!`
        );
        console.log(`üì© –†–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–≥—Ä–æ–∫—É: ${player.firstName} - ${role}`);
    }
}

function getHelpMessage() {
    return `üéÆ –ö–æ–º–∞–Ω–¥—ã –ú–∞—Ñ–∏–∏:

–í –ß–ê–¢–ï:
‚Ä¢ "–Ω–∞—á–∞—Ç—å" - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ
‚Ä¢ "—Å—Ç–∞—Ä—Ç" - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É (6+ –∏–≥—Ä–æ–∫–æ–≤)
‚Ä¢ "/pofig" - –Ω–∞—á–∞—Ç—å –æ—Ç 2 –∏–≥—Ä–æ–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
‚Ä¢ "—Å—Ç–∞—Ç—É—Å" - —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
‚Ä¢ "–≥–æ–ª–æ—Å" - –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è

–í –õ–ò–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–Ø–•:
‚Ä¢ "–≥–æ–ª–æ—Å" - –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
‚Ä¢ "—Ä–æ–ª—å" - —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å
‚Ä¢ "–ø–æ–º–æ—â—å" - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

‚ö° –ò–≥—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ñ–∞–∑—ã!
‚è∞ –î–µ–Ω—å: 2 –º–∏–Ω—É—Ç—ã, –ù–æ—á—å: 1 –º–∏–Ω—É—Ç–∞`;
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
vk.updates.start().then(() => {
    console.log('üéÆ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å!');
    console.log('‚ö° –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Memphis_Rains aka –ú–∞–∫—Å–∏–º –î–∞–≤—ã–¥–æ–≤');
    console.log('‚è∞ –î–µ–Ω—å: 2 –º–∏–Ω—É—Ç—ã, –ù–æ—á—å: 1 –º–∏–Ω—É—Ç–∞');
    console.log(`üëë –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –©–∞—Å –æ–Ω: ${ADMIN_ID}`);
    console.log('================================');
}).catch(console.error);
/* –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç–∏–∫! 
–≠—Ç–æ –º–æ–π —Å—ã—Ä–æ–π –ø—Ä–æ–µ–∫—Ç —á–∏—Å—Ç–æ –¥–ª—è –≥–∏—Ç—Ö–∞–±–∞.
–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã –¥–æ–≤–µ–¥–µ—Ç–µ –µ–≥–æ –¥–æ –∏–¥–µ–∞–ª–∞ –∏ –≤–∞–º
–ó–∞–π–¥–µ—Ç. –í –ø—Ä–∏–Ω—Ü–∏–ø–µ —Ä–∞–±–æ—Ç—ã –Ω–µ –ø—Ä—è–º –º–Ω–æ–≥–æ.

–°–≤—è–∑—å —Å–æ –º–Ω–æ–π: 
VK: https://vk.com/neckiy

–° –ª—é–±–æ–≤—å—é, –ú–∞–∫—Å–∏–º –î–∞–≤—ã–¥–æ–≤ <3
*/ 